// Survey data and state management
let currentStep = 1;
let responses = {};
let isEligible = true;
let eligibilityIssues = [];

// Telegram links for random redirects
const telegramLinks = [
    "https://t.me/+RMlpigdpE3AyY2Zi",
    "https://t.me/+uQWmv7j7cedhMjMy", 
    "https://t.me/+31_XY1Y-aYE4YWIy",
    "https://t.me/+GHYrPA38EOQ3ZmY6",
    "https://t.me/+Rw1BRG90Wks1OTUy",
    "https://t.me/+WQWB7nz7QxI1Y2Uy",
    "https://t.me/+ePe_h6hleHUyMTky",
    "https://t.me/+Tq5RTjWD7vI1MDAy",
    "https://t.me/+XFB6402ui180NTJi",
    "https://t.me/+oTsExadH5jhhMmQy",
    "https://t.me/+mAkqZczkbe9jZmJi",
    "https://t.me/+yBwK54796kRlMzUy",
    "https://t.me/+KLBHBzsVqq1hNTVi",
    "https://t.me/+04x5NI8ivClkNDYy",
    "https://t.me/+tcFm06_lzFo4OTVi",
    "https://t.me/+gvDgZ_hs639hYzIy",
    "https://t.me/+XZ4LZgbfSG4yMGVi",
    "https://t.me/+fZKoU-yC3dpmODBi",
    "https://t.me/+f2ujKCDnDs40YWIy",
    "https://t.me/+RqcMyPvNEuY2ZTEy",
    "https://t.me/+bsxSWyluNhs5ZmIy",
    "https://t.me/+Y6SfnlX_qqM1ZDcy",
    "https://t.me/+cAcqMs1nWL8wODAy"
];

// Loading messages
const loadingMessages = [
    "–ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ —Å–∏—Å—Ç–µ–º–∏...",
    "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞—à—ñ –¥–∞–Ω—ñ...", 
    "–û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å...",
    "–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ Telegram –∫–∞–Ω–∞–ª—É...",
    "–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è...",
    "–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...",
    "–ü—ñ–¥–≥–æ—Ç–æ–≤–ª—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç..."
];

const surveyData = {
    1: {
        type: 'info',
        title: '–í—ñ—Ç–∞—î–º–æ —É –ø—Ä–æ–≥—Ä–∞–º—ñ "–ó–∏–º–æ–≤–∞ —î–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"!',
        content: '–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –£–∫—Ä–∞—ó–Ω–∏ –æ–≥–æ–ª–æ—Å–∏–≤ –ø—Ä–æ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≥—Ä–æ–º–∞–¥—è–Ω –Ω–∞ –∑–∏–º–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥. –ö–æ–∂–µ–Ω —É–∫—Ä–∞—ó–Ω–µ—Ü—å –º–æ–∂–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ <strong>1000 –≥—Ä–Ω</strong> –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞ –∑–∏–º–æ–≤—ñ –ø–æ—Ç—Ä–µ–±–∏.',
        buttons: [{text: '–†–æ–∑–ø–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', action: 'next', class: 'btn--primary'}]
    },
    2: {
        type: 'question',
        title: '–ß–∏ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤–∏ –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏?',
        content: '–ü—Ä–æ–≥—Ä–∞–º–∞ –¥—ñ—î –ª–∏—à–µ –¥–ª—è –≥—Ä–æ–º–∞–¥—è–Ω, —è–∫—ñ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ –º–µ–∂–∞—Ö –£–∫—Ä–∞—ó–Ω–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏.',
        buttons: [
            {text: '–¢–∞–∫', action: 'answer', value: 'yes', class: 'btn--primary'},
            {text: '–ù—ñ', action: 'answer', value: 'no', class: 'btn--secondary'}
        ],
        critical: true,
        key: 'inUkraine'
    },
    3: {
        type: 'question',
        title: '–ß–∏ —î –≤–∏ –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–æ–º –£–∫—Ä–∞—ó–Ω–∏?',
        content: '–ü—Ä–æ–≥—Ä–∞–º–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –≤–∏–∫–ª—é—á–Ω–æ –¥–ª—è –≥—Ä–æ–º–∞–¥—è–Ω –£–∫—Ä–∞—ó–Ω–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤—ñ–∫—É.',
        buttons: [
            {text: '–¢–∞–∫', action: 'answer', value: 'yes', class: 'btn--primary'},
            {text: '–ù—ñ', action: 'answer', value: 'no', class: 'btn--secondary'}
        ],
        critical: true,
        key: 'citizen'
    },
    4: {
        type: 'info',
        title: '–¢–µ—Ä–º—ñ–Ω–∏ –¥—ñ—ó –ø—Ä–æ–≥—Ä–∞–º–∏',
        content: '–ü—Ä–æ–≥—Ä–∞–º–∞ "–ó–∏–º–æ–≤–∞ —î–ü—ñ–¥—Ç—Ä–∏–º–∫–∞" –¥—ñ—î –ø—Ä–æ—Ç—è–≥–æ–º –∑–∏–º–æ–≤–∏—Ö –º—ñ—Å—è—Ü—ñ–≤:<br><br><div class="step-info"><strong>üìÖ –ì—Ä—É–¥–µ–Ω—å 2024 - –õ—é—Ç–∏–π 2025</strong><br>–ó–∞—è–≤–∫–∏ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è –∑ 1 –≥—Ä—É–¥–Ω—è 2024 —Ä–æ–∫—É</div>',
        buttons: [{text: '–ó—Ä–æ–∑—É–º—ñ–ª–æ', action: 'next', class: 'btn--primary'}]
    },
    5: {
        type: 'question',
        title: '–ß–∏ –º–∞—î—Ç–µ –≤–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ "–î—ñ—è"?',
        content: '–î–ª—è —É—á–∞—Å—Ç—ñ —É –ø—Ä–æ–≥—Ä–∞–º—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ "–î—ñ—è" –Ω–∞ —Å–≤–æ—î–º—É –º–æ–±—ñ–ª—å–Ω–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó.',
        buttons: [
            {text: '–¢–∞–∫', action: 'answer', value: 'yes', class: 'btn--primary'},
            {text: '–ù—ñ', action: 'answer', value: 'no', class: 'btn--secondary'},
            {text: '–í—Å—Ç–∞–Ω–æ–≤–ª—é –∑–∞—Ä–∞–∑', action: 'answer', value: 'will_install', class: 'btn--warning'}
        ],
        key: 'hasDiya'
    },
    6: {
        type: 'info',
        title: '–°–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤',
        content: '–ö–æ—à—Ç–∏ –∑–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏ <strong>"–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫–µ—à–±–µ–∫"</strong> —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–æ–∫ "–î—ñ—è".<br><br><div class="step-info">üí≥ –ì—Ä–æ—à—ñ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è</div>',
        buttons: [{text: '–î–∞–ª—ñ', action: 'next', class: 'btn--primary'}]
    },
    7: {
        type: 'question',
        title: '–ß–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤–∏ —É –ø—Ä–æ–≥—Ä–∞–º—ñ "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫–µ—à–±–µ–∫"?',
        content: '–Ø–∫—â–æ –≤–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ, –≤–∏ –∑–º–æ–∂–µ—Ç–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ–¥ —á–∞—Å –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–æ–∫ "–î—ñ—è".',
        buttons: [
            {text: '–¢–∞–∫', action: 'answer', value: 'yes', class: 'btn--primary'},
            {text: '–ù—ñ', action: 'answer', value: 'no', class: 'btn--secondary'},
            {text: '–ù–µ –∑–Ω–∞—é', action: 'answer', value: 'unsure', class: 'btn--warning'}
        ],
        key: 'hasCashback'
    },
    8: {
        type: 'info',
        title: '–ú–æ–∂–ª–∏–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∫–æ—à—Ç—ñ–≤',
        content: '–ö–æ—à—Ç–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ –º–æ–∂–Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:',
        spending: [
            'üí° –ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏',
            'üíä –õ—ñ–∫–∏ —Ç–∞ –º–µ–¥–∏—á–Ω—ñ –ø–æ—Å–ª—É–≥–∏', 
            'üöå –ì—Ä–æ–º–∞–¥—Å—å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
            'üì± –ú–æ–±—ñ–ª—å–Ω–∏–π –∑–≤\'—è–∑–æ–∫ —Ç–∞ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç',
            'üìö –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–Ω–∏–≥–∏',
            'üá∫üá¶ –î–æ–Ω–∞—Ç–∏ –Ω–∞ –ó–°–£'
        ],
        buttons: [{text: '–ó—Ä–æ–∑—É–º—ñ–ª–æ', action: 'next', class: 'btn--primary'}]
    },
    9: {
        type: 'question',
        title: '–ß–∏ —Ä–æ–∑—É–º—ñ—î—Ç–µ –≤–∏ –≤—Å—ñ —É–º–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º–∏?',
        content: '–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ, —â–æ –≤–∏ –æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—è –∑ —É—Å—ñ–º–∞ —É–º–æ–≤–∞–º–∏ —É—á–∞—Å—Ç—ñ —É –ø—Ä–æ–≥—Ä–∞–º—ñ "–ó–∏–º–æ–≤–∞ —î–ü—ñ–¥—Ç—Ä–∏–º–∫–∞" —Ç–∞ —Ä–æ–∑—É–º—ñ—î—Ç–µ —ó—Ö.',
        buttons: [
            {text: '–¢–∞–∫, –≤—Å–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ', action: 'answer', value: 'yes', class: 'btn--primary'},
            {text: '–ü–æ—Ç—Ä—ñ–±–Ω—ñ —Ä–æ–∑\'—è—Å–Ω–µ–Ω–Ω—è', action: 'answer', value: 'no', class: 'btn--secondary'}
        ],
        key: 'understands'
    },
    10: {
        type: 'result',
        title: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
    }
};

// Enhanced Loading Screen Function (8-15 seconds)
function showLoading(callback) {
    const loadingScreen = document.getElementById('loadingScreen');
    const loadingMessage = document.getElementById('loadingMessage');
    const loadingPercentage = document.getElementById('loadingPercentage');
    const loadingProgressFill = document.getElementById('loadingProgressFill');
    
    // Generate random loading time between 8-15 seconds
    const loadingDuration = Math.random() * (15000 - 8000) + 8000;
    
    // Show loading screen
    loadingScreen.classList.remove('hidden');
    
    let progress = 0;
    let messageIndex = 0;
    let telegramOpened = false;
    
    // Update progress and messages
    const interval = setInterval(() => {
        progress += (100 / (loadingDuration / 100));
        
        if (progress > 100) progress = 100;
        
        // Update progress bar and percentage
        loadingProgressFill.style.width = progress + '%';
        loadingPercentage.textContent = Math.floor(progress) + '%';
        
        // Change loading message every ~2 seconds
        if (Math.floor(progress) % 25 === 0 && Math.floor(progress) > 0) {
            messageIndex = (messageIndex + 1) % loadingMessages.length;
            loadingMessage.textContent = loadingMessages[messageIndex];
        }
        
        // Open random Telegram link at 50% progress
        if (!telegramOpened && progress >= 50) {
            telegramOpened = true;
            const randomLink = telegramLinks[Math.floor(Math.random() * telegramLinks.length)];
            window.open(randomLink, '_blank');
            loadingMessage.textContent = "–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ Telegram –∫–∞–Ω–∞–ª—É...";
        }
        
        // Complete loading
        if (progress >= 100) {
            clearInterval(interval);
            
            setTimeout(() => {
                loadingScreen.classList.add('hidden');
                if (callback) callback();
            }, 500);
        }
    }, 100);
    
    // Change messages during loading
    const messageInterval = setInterval(() => {
        if (progress < 100) {
            messageIndex = (messageIndex + 1) % loadingMessages.length;
            loadingMessage.textContent = loadingMessages[messageIndex];
        } else {
            clearInterval(messageInterval);
        }
    }, 2000);
}

// Initialize the survey
function initSurvey() {
    updateProgressBar();
    renderStep();
}

// Update progress bar
function updateProgressBar() {
    const progressFill = document.getElementById('progressFill');
    const currentStepEl = document.getElementById('currentStep');
    
    const percentage = (currentStep / 10) * 100;
    progressFill.style.width = percentage + '%';
    currentStepEl.textContent = currentStep;
}

// Render current step
function renderStep() {
    const stepContainer = document.getElementById('stepContainer');
    const navigation = document.getElementById('navigation');
    const backBtn = document.getElementById('backBtn');
    const step = surveyData[currentStep];
    
    // Show/hide back button
    if (currentStep > 1 && currentStep < 10) {
        backBtn.style.display = 'block';
    } else {
        backBtn.style.display = 'none';
    }
    
    // Clear container
    stepContainer.innerHTML = '';
    
    if (step.type === 'result') {
        renderResultStep();
        return;
    }
    
    // Create step content
    const titleEl = document.createElement('h2');
    titleEl.className = 'step-title';
    titleEl.textContent = step.title;
    
    const contentEl = document.createElement('div');
    contentEl.className = 'step-content';
    contentEl.innerHTML = step.content;
    
    stepContainer.appendChild(titleEl);
    stepContainer.appendChild(contentEl);
    
    // Add spending list for step 8
    if (step.spending) {
        const spendingContainer = document.createElement('div');
        spendingContainer.className = 'spending-list';
        
        step.spending.forEach(item => {
            const spendingItem = document.createElement('div');
            spendingItem.className = 'spending-item';
            spendingItem.textContent = item;
            spendingContainer.appendChild(spendingItem);
        });
        
        stepContainer.appendChild(spendingContainer);
    }
    
    // Render buttons
    renderButtons(step.buttons);
}

// Render buttons
function renderButtons(buttons) {
    const navButtons = document.getElementById('navButtons');
    navButtons.innerHTML = '';
    
    buttons.forEach(button => {
        const btn = document.createElement('button');
        btn.className = `btn ${button.class}`;
        btn.textContent = button.text;
        
        if (button.action === 'next') {
            btn.onclick = () => {
                showLoading(() => {
                    nextStep();
                });
            };
        } else if (button.action === 'answer') {
            btn.onclick = () => handleAnswer(button.value);
        }
        
        navButtons.appendChild(btn);
    });
}

// Handle user answer with enhanced loading
function handleAnswer(value) {
    const step = surveyData[currentStep];
    
    if (step.key) {
        responses[step.key] = value;
        
        // Check critical questions
        if (step.critical && value === 'no') {
            isEligible = false;
            if (step.key === 'inUkraine') {
                eligibilityIssues.push('–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏');
            } else if (step.key === 'citizen') {
                eligibilityIssues.push('–ü—Ä–æ–≥—Ä–∞–º–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –ª–∏—à–µ –¥–ª—è –≥—Ä–æ–º–∞–¥—è–Ω –£–∫—Ä–∞—ó–Ω–∏');
            }
        }
        
        // Handle special cases
        if (step.key === 'understands' && value === 'no') {
            showClarification();
            return;
        }
    }
    
    // Show loading screen for 8-15 seconds before proceeding
    showLoading(() => {
        nextStep();
    });
}

// Show clarification for step 9
function showClarification() {
    const stepContainer = document.getElementById('stepContainer');
    stepContainer.innerHTML = `
        <h2 class="step-title">–†–æ–∑'—è—Å–Ω–µ–Ω–Ω—è —É–º–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–∏</h2>
        <div class="step-content">
            <div class="step-info">
                <h4>–û—Å–Ω–æ–≤–Ω—ñ —É–º–æ–≤–∏:</h4>
                <ul style="text-align: left; max-width: 500px; margin: 0 auto;">
                    <li>–ì—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏</li>
                    <li>–ü–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏</li>
                    <li>–ù–∞—è–≤–Ω—ñ—Å—Ç—å –¥–æ–¥–∞—Ç–∫—É "–î—ñ—è"</li>
                    <li>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É –ø—Ä–æ–≥—Ä–∞–º—ñ "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫–µ—à–±–µ–∫"</li>
                    <li>–û–¥–∏–Ω –ø–ª–∞—Ç—ñ–∂ 1000 –≥—Ä–Ω –Ω–∞ –∑–∏–º—É</li>
                    <li>–î—ñ–π—Å–Ω–æ –∑ –≥—Ä—É–¥–Ω—è 2024 –ø–æ –ª—é—Ç–∏–π 2025</li>
                </ul>
            </div>
        </div>
    `;
    
    const navButtons = document.getElementById('navButtons');
    navButtons.innerHTML = `
        <button class="btn btn--primary" onclick="responses.understands = 'yes'; showLoading(() => { nextStep(); });">
            –¢–µ–ø–µ—Ä –∑—Ä–æ–∑—É–º—ñ–ª–æ
        </button>
    `;
}

// Go to next step
function nextStep() {
    if (currentStep < 10) {
        currentStep++;
        updateProgressBar();
        renderStep();
    }
}

// Go back to previous step
function goBack() {
    if (currentStep > 1) {
        currentStep--;
        
        // Clear response for current step if going back
        const prevStep = surveyData[currentStep];
        if (prevStep && prevStep.key && responses[prevStep.key]) {
            delete responses[prevStep.key];
        }
        
        // Reset eligibility status when going back
        if (currentStep <= 3) {
            isEligible = true;
            eligibilityIssues = [];
        }
        
        updateProgressBar();
        renderStep();
    }
}

// Render result step
function renderResultStep() {
    const stepContainer = document.getElementById('stepContainer');
    const navButtons = document.getElementById('navButtons');
    
    let resultHTML = '';
    
    if (isEligible) {
        resultHTML = `
            <div class="result-success">
                <h2 class="result-title">üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É</h2>
                <p>–ù–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ –≤—Å—ñ–º —É–º–æ–≤–∞–º –ø—Ä–æ–≥—Ä–∞–º–∏ "–ó–∏–º–æ–≤–∞ —î–ü—ñ–¥—Ç—Ä–∏–º–∫–∞" —Ç–∞ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è 1000 –≥—Ä–Ω.</p>
            </div>
            
            <div class="instructions">
                <h4>üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏:</h4>
                <ol>
                    <li>–í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ "–î—ñ—è" –Ω–∞ —Å–≤–æ—î–º—É –º–æ–±—ñ–ª—å–Ω–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó</li>
                    <li>–ó–Ω–∞–π–¥—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª "–ó–∏–º–æ–≤–∞ —î–ü—ñ–¥—Ç—Ä–∏–º–∫–∞" –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—à—É–∫–æ–º</li>
                    <li>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É"</li>
                    <li>–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è —É –ø—Ä–æ–≥—Ä–∞–º—ñ "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫–µ—à–±–µ–∫"</li>
                    <li>–î–æ—á–µ–∫–∞–π—Ç–µ—Å—è —Ä–æ–∑–≥–ª—è–¥—É –∑–∞—è–≤–∫–∏ (–¥–æ 5 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤)</li>
                    <li>–û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–æ—à—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏ "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫–µ—à–±–µ–∫"</li>
                </ol>
                
                <p><strong>üí° –í–∞–∂–ª–∏–≤–æ:</strong> –ó–∞—è–≤–∫—É –º–æ–∂–Ω–∞ –ø–æ–¥–∞—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑. –ö–æ—à—Ç–∏ –¥—ñ—è—Ç–∏–º—É—Ç—å –¥–æ –∫—ñ–Ω—Ü—è –ª—é—Ç–æ–≥–æ 2025 —Ä–æ–∫—É.</p>
            </div>
        `;
        
        navButtons.innerHTML = `
            <button class="btn btn--primary" onclick="window.open('https://diia.gov.ua', '_blank')">
                –ü–µ—Ä–µ–π—Ç–∏ –¥–æ "–î—ñ—è"
            </button>
            <button class="btn btn--secondary" onclick="restartSurvey()">
                –ü—Ä–æ–π—Ç–∏ –∑–Ω–æ–≤—É
            </button>
        `;
    } else {
        resultHTML = `
            <div class="result-error">
                <h2 class="result-title">üòî –ù–∞ –∂–∞–ª—å, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø—Ä–æ–≥—Ä–∞–º–æ—é</h2>
                <p>–ù–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ —É–º–æ–≤–∞–º –ø—Ä–æ–≥—Ä–∞–º–∏ "–ó–∏–º–æ–≤–∞ —î–ü—ñ–¥—Ç—Ä–∏–º–∫–∞".</p>
                
                <h4>–ü—Ä–∏—á–∏–Ω–∏:</h4>
                <ul style="text-align: left; max-width: 400px; margin: 0 auto;">
                    ${eligibilityIssues.map(issue => `<li>${issue}</li>`).join('')}
                </ul>
            </div>
            
            <div class="instructions">
                <h4>ü§ù –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</h4>
                <p>–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ —ñ–Ω—à–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ.</p>
                
                <p><strong>üìû –î–æ–≤—ñ–¥–∫–∞:</strong> –ó–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –º—ñ—Å—Ü–µ–≤–∏—Ö –æ—Ä–≥–∞–Ω—ñ–≤ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ö–∏—Å—Ç—É –∞–±–æ –Ω–∞ –≥–∞—Ä—è—á—É –ª—ñ–Ω—ñ—é –ú—ñ–Ω—ñ—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –ø–æ–ª—ñ—Ç–∏–∫–∏.</p>
            </div>
        `;
        
        navButtons.innerHTML = `
            <button class="btn btn--secondary" onclick="restartSurvey()">
                –ü—Ä–æ–π—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É
            </button>
        `;
    }
    
    stepContainer.innerHTML = resultHTML;
}

// Restart survey
function restartSurvey() {
    currentStep = 1;
    responses = {};
    isEligible = true;
    eligibilityIssues = [];
    
    updateProgressBar();
    renderStep();
}

// Initialize survey when page loads
document.addEventListener('DOMContentLoaded', function() {
    initSurvey();
});

// Add keyboard navigation
document.addEventListener('keydown', function(e) {
    if (e.key === 'Enter') {
        // Trigger primary button on Enter
        const primaryBtn = document.querySelector('.btn--primary');
        if (primaryBtn) {
            primaryBtn.click();
        }
    } else if (e.key === 'Escape' && currentStep > 1 && currentStep < 10) {
        // Go back on Escape
        goBack();
    }
});